name: Code Quality & Security

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Executar análise de segurança diariamente às 2:00 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Job de análise de código
  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necessário para análise completa
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: |
          npm run lint -- --format=json --output-file=eslint-report.json || true
          npm run lint
          
      - name: Run Prettier check
        run: npm run format:check
        
      - name: Run TypeScript compiler
        run: npm run type-check
        
      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: eslint-report.json

  # Job de testes unitários
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test -- --coverage --watchAll=false
        env:
          CI: true
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job de testes de integração
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test database
        run: |
          npm run db:migrate:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000

  # Job de testes E2E
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job de análise de segurança
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-report.json
        continue-on-error: true
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            npm-audit.json
            snyk-report.json
            trivy-results.sarif

  # Job de análise de performance
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          
      - name: Analyze bundle size
        run: |
          npm run analyze
          
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Job de análise de dependências
  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check for outdated packages
        run: |
          npm outdated --json > outdated-packages.json || true
          npm outdated
        continue-on-error: true
        
      - name: Check for unused dependencies
        run: |
          npx depcheck --json > unused-dependencies.json || true
          npx depcheck
        continue-on-error: true
        
      - name: Analyze package size
        run: |
          npx cost-of-modules --json > package-costs.json || true
          npx cost-of-modules
        continue-on-error: true
        
      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-reports
          path: |
            outdated-packages.json
            unused-dependencies.json
            package-costs.json

  # Job de relatório consolidado
  quality-report:
    name: Quality Report
    runs-on: ubuntu-latest
    needs: [code-analysis, unit-tests, integration-tests, e2e-tests, security-analysis, performance-analysis, dependency-analysis]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate quality report
        run: |
          echo "# 📊 Relatório de Qualidade de Código" > quality-report.md
          echo "" >> quality-report.md
          echo "**Data:** $(date)" >> quality-report.md
          echo "**Commit:** ${{ github.sha }}" >> quality-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> quality-report.md
          echo "" >> quality-report.md
          
          echo "## 🧪 Resultados dos Testes" >> quality-report.md
          echo "- **Análise de Código:** ${{ needs.code-analysis.result }}" >> quality-report.md
          echo "- **Testes Unitários:** ${{ needs.unit-tests.result }}" >> quality-report.md
          echo "- **Testes de Integração:** ${{ needs.integration-tests.result }}" >> quality-report.md
          echo "- **Testes E2E:** ${{ needs.e2e-tests.result }}" >> quality-report.md
          echo "" >> quality-report.md
          
          echo "## 🔒 Análise de Segurança" >> quality-report.md
          echo "- **Análise de Segurança:** ${{ needs.security-analysis.result }}" >> quality-report.md
          echo "" >> quality-report.md
          
          echo "## ⚡ Performance" >> quality-report.md
          echo "- **Análise de Performance:** ${{ needs.performance-analysis.result }}" >> quality-report.md
          echo "" >> quality-report.md
          
          echo "## 📦 Dependências" >> quality-report.md
          echo "- **Análise de Dependências:** ${{ needs.dependency-analysis.result }}" >> quality-report.md
          echo "" >> quality-report.md
          
          # Adicionar status geral
          if [[ "${{ needs.code-analysis.result }}" == "success" && 
                "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.e2e-tests.result }}" == "success" && 
                "${{ needs.security-analysis.result }}" == "success" ]]; then
            echo "## ✅ Status Geral: APROVADO" >> quality-report.md
          else
            echo "## ❌ Status Geral: REPROVADO" >> quality-report.md
          fi
          
      - name: Comment PR with quality report
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
            
      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md