// Teste de conex√£o com Supabase
// Execute este arquivo para verificar se a configura√ß√£o est√° funcionando

import { createClient } from '@supabase/supabase-js'
import { Database } from './types'

// Configura√ß√£o do cliente Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

if (!supabaseUrl || !supabaseKey) {
  throw new Error('Vari√°veis de ambiente do Supabase n√£o configuradas')
}

const supabase = createClient<Database>(supabaseUrl, supabaseKey)

// Fun√ß√£o para testar a conex√£o b√°sica
export async function testConnection() {
  try {
    console.log('üîÑ Testando conex√£o com Supabase...')
    
    // Teste 1: Verificar se consegue conectar
    const { data, error } = await supabase.from('profiles').select('count').single()
    
    if (error && error.code !== 'PGRST116') { // PGRST116 = tabela vazia, mas conex√£o OK
      throw error
    }
    
    console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso!')
    return true
  } catch (error) {
    console.error('‚ùå Erro na conex√£o com Supabase:', error)
    return false
  }
}

// Fun√ß√£o para testar autentica√ß√£o
export async function testAuth() {
  try {
    console.log('üîÑ Testando sistema de autentica√ß√£o...')
    
    // Verificar se o usu√°rio est√° logado
    const { data: { user }, error } = await supabase.auth.getUser()
    
    if (error) {
      console.log('‚ÑπÔ∏è Nenhum usu√°rio logado (normal para primeiro acesso)')
      return { authenticated: false, user: null }
    }
    
    if (user) {
      console.log('‚úÖ Usu√°rio autenticado:', user.email)
      return { authenticated: true, user }
    }
    
    console.log('‚ÑπÔ∏è Nenhum usu√°rio logado')
    return { authenticated: false, user: null }
  } catch (error) {
    console.error('‚ùå Erro no teste de autentica√ß√£o:', error)
    return { authenticated: false, user: null, error }
  }
}

// Fun√ß√£o para testar RLS (Row Level Security)
export async function testRLS() {
  try {
    console.log('üîÑ Testando pol√≠ticas RLS...')
    
    // Teste de leitura nas tabelas principais
    const tables = ['profiles', 'companies', 'projects', 'tasks', 'activities']
    const results = []
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase.from(table).select('id').limit(1)
        
        if (error) {
          results.push({ table, status: 'error', message: error.message })
        } else {
          results.push({ table, status: 'success', count: data?.length || 0 })
        }
      } catch (err) {
        results.push({ table, status: 'error', message: (err as Error).message })
      }
    }
    
    console.log('üìä Resultados dos testes RLS:')
    results.forEach(result => {
      const icon = result.status === 'success' ? '‚úÖ' : '‚ö†Ô∏è'
      console.log(`${icon} ${result.table}: ${result.status}`)
      if (result.status === 'error') {
        console.log(`   Erro: ${result.message}`)
      }
    })
    
    return results
  } catch (error) {
    console.error('‚ùå Erro no teste RLS:', error)
    return []
  }
}

// Fun√ß√£o para testar inser√ß√£o de dados de exemplo
export async function testDataInsertion() {
  try {
    console.log('üîÑ Testando inser√ß√£o de dados...')
    
    // Verificar se j√° existem dados de exemplo
    const { data: existingCompany } = await supabase
      .from('companies')
      .select('id')
      .eq('name', 'Empresa Teste')
      .single()
    
    if (existingCompany) {
      console.log('‚ÑπÔ∏è Dados de exemplo j√° existem')
      return { success: true, message: 'Dados j√° existem' }
    }
    
    // Tentar inserir uma empresa de teste (apenas se autenticado)
    const { data: { user } } = await supabase.auth.getUser()
    
    if (!user) {
      console.log('‚ÑπÔ∏è Usu√°rio n√£o autenticado - pulando teste de inser√ß√£o')
      return { success: true, message: 'Usu√°rio n√£o autenticado' }
    }
    
    const { data, error } = await supabase
      .from('companies')
      .insert({
        name: 'Empresa Teste',
        description: 'Empresa criada para teste de conex√£o',
        country: 'Brasil'
      })
      .select()
    
    if (error) {
      throw error
    }
    
    console.log('‚úÖ Dados inseridos com sucesso!')
    return { success: true, data }
  } catch (error) {
    console.error('‚ùå Erro na inser√ß√£o de dados:', error)
    return { success: false, error }
  }
}

// Fun√ß√£o principal para executar todos os testes
export async function runAllTests() {
  console.log('üöÄ Iniciando testes do Supabase...\n')
  
  const results = {
    connection: await testConnection(),
    auth: await testAuth(),
    rls: await testRLS(),
    dataInsertion: await testDataInsertion()
  }
  
  console.log('\nüìã Resumo dos testes:')
  console.log('- Conex√£o:', results.connection ? '‚úÖ' : '‚ùå')
  console.log('- Autentica√ß√£o:', results.auth.authenticated ? '‚úÖ' : '‚ÑπÔ∏è')
  console.log('- RLS:', results.rls.length > 0 ? '‚úÖ' : '‚ùå')
  console.log('- Inser√ß√£o:', results.dataInsertion.success ? '‚úÖ' : '‚ùå')
  
  return results
}

// Executar testes se este arquivo for chamado diretamente
if (require.main === module) {
  runAllTests().then(() => {
    console.log('\nüèÅ Testes conclu√≠dos!')
    process.exit(0)
  }).catch((error) => {
    console.error('üí• Erro fatal nos testes:', error)
    process.exit(1)
  })
}